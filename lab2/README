README
=====================================
Michael Salerno, 108512298, cse533-8
Scott Harvey,    108272691, cse533-11
=====================================

BUILDING IT!     makefile
-------------------------
For none of our debug printouts, just type:
$ make

For debug printouts, just type:
$ make debug

If you want the client program to save the transfered file, just type:
$ make create_file

NOTE: if the file to transfer is "testfile" then the client will create an
output file using mkstemp(3) that will be called "testfile.tmpXXXXXX" with
the X's replace with random letters/numbers.


We re-did the sliding window 4 times over 3 weeks, but we finally got it right.

================================
CHANGES TO: rtt.c, unprtt.h
================================

Besides the basics recommended/required by the A2 doc:

We store most fields in MICROseconds (the type suseconds_t and abbreviated as
usec).

We added 3 fields:
	- time_t         rtt_base_sec;   /* sec since EPOCH at rtt_init() */
	- suseconds_t    rtt_base_usec;  /* us since EPOCH at rtt_init() */
	- suseconds_t    rtt_dub_rto;	 /* the doubling RTO for timeouts, in us */

Initial RTO is 1 second, as in TCP RENO implementations.

rtt_init():
	This inits all fields to 0 except:
		- sets base times (as above)
		- sets rtt_sdev to 250000 << 2
				(Which makes the initial rtt_rto 1000000usecs or 1 sec)

rtt_ts():
	Used to get a timestamp representing usecs since rtt_init() was called.
	This is called when a pkt is sent and then the timestamp is stored in our
	sliding window.
		On a timeout, the pkt (the base pkt) has it's timestamp recalculated
		when sending BECAUSE if this pkt time's out again ONLY THEN we take
		call rtt_stop().
		We DO use Karn's "Algorithm"/Rule.

rtt_start_timer(): (was rtt_start())
	We use setitimer so this fills in an struct itimerval{} for the caller.
	Calls rtt_minmax() and makes sure that the itimerval.itvalue.tv_usec field
	is never more than 999999 (more than 1 second in the usec field is BAD)

rtt_stop():
    Only called rtt_stop for an ACK that is cumulative, or it is an ACK for a
    base that was only transmitted once.
    		( SEE above rtt_ts() for more info )
    Uses integer arithmetic following Jacobson‐Karels Algorithm, their paper,
    and the chapter 22 lecture notes.

rtt_timeout():
	Called on timeouts. It keeps doubling the RTO until 12 retransmissions.
	The original RTO for this pkt is backed up in the rtt_rto field and it
	is restored when rtt_start_timer() is called for a new packet, i.e.
	rtt_nrexmt is 0.


=======================================


================================
CHANGES TO: get_ifi_info_plus.c
================================

make_iface_list():
    almost the same as the main of prifinfo_plus but instead of printing, it filled
    out a list of structs. The struct held the values of the IP, mask, and subnet. This
    list was then later used by the server/client to choose what IP to bind to and weather to
    use SO_DONTROUTE or not.

get_matching_iface():
    this function looped through the list of iface structs and returned the
    one that the client/server should connect to. It figured this out by doing
    a bit wise and on the mast of the interface with the IP of the destination.
    It then checked if the result was equal to the subnet of the interface.
    The it returned the matching structure with the longest prefix matching.


==================================
TCP mechanisms
==================================

the handshake:
    The first handshake is done by the client. The client sends the filename of the file
    it wants to receive in the data section of the packet. If this fails it will be retransmitted up to 3 times.
    from 2 to 6 seconds. The server then sends the second handshake. The server send over the new port that the
    client should be connecting to. If this fails the server will resend the handshake over two connections, a connection
    using the old port and the new port. This is done for up to 12 attempts from 1 to 6 seconds. The final handshake is
    done by the client. This packet contains no data and is just a normal ack. If the third handshake get lost, the server
    will resend the second handshake and the client will simply duplicate ack it.

Fast Retransmit:
    When the server receives an ack for the same packet for a total of four times, the server
    enters fast retransmit. Fast retransmit resets the duplicate ack count to 0 and sets ssthresh to
    the max(servlastseqsent - seq)/ 2), 2). After this the packet is sent out.

==========================================
ARQ, The Sliding Window  (xtcp.c  xtcp.h)
==========================================

We used a circular linked list of struct win_node{} defined as follows:

struct win_node {
    int datalen;			/* length of the data which follows pkt */
	struct xtcphdr* pkt; 	/* a ptr to a hdr which is followed by data. */
    suseconds_t ts;         /* time at which it was sent from the window */
    struct win_node* next; 	/* the next node */
};

All the state of the sliding window is kept in a struct window{}.
It has fields for the number of pkts in the window, the last ack recv'd,
the last advertised window recv'd, the last seq sent, the cwin, ssthresh,
duplicate ack count, a ptr to the base of the circular win_node list.
Packets themselves (struct xtcphdr{}) are malloc'd/free'd when they are 
inserted/removed from the window.


================================
FIN
