              _____________________________________________
              ||||      README for Assignment 4        ||||
              =============================================
               || Scott Harvey     cse533-11  108272691 ||
               || Michael Salerno  cse533-8   108512298 ||
              =============================================

BUILDING IT!            makefile
==============================================================================
For none of our debug printouts and no color, just type:
$ make

For ANSI CoLoR, type (same printouts as no color but easier to read)
$ make color

For debug printouts with ANSI CoLoR, just type:
$ make debug

Before make'ing different targets (debug, color) you must run:
$ make clean

To look at ANSI color output that has been re-directed to a file:
(only works when built with 'make debug')
$ less -R fileWithANSIColor

TESTING IT!             various tests
==============================================================================
Testing receiving/sending pinging the previous stop at the ping.
Filters out all except valid ping recv'd printout.
1. On all vmXX's run ARP.
2. On all vmXX's EXCEPT vm8 run:
./tour_cse533-11 | grep "bytes from"
3. On vm8 run:
./tour_cse533-11 vm9 vm8 vm10 vm8 vm6 vm8 vm7 vm8 vm4 vm8 vm5 vm8 vm1 vm8 vm2 vm8 vm3 vm8 | grep "bytes from"


==============================================================================
==================================== TOUR ====================================
==============================================================================

       The tour header structure
==========================================
The struct tourhdr is defined in tour.h as the below:
struct tourhdr {
    struct in_addr g_ip;
    in_port_t g_port;
    uint16_t index;    /* (struct in_addr*)trhdr + trhdr->index + 3 */
    uint32_t num_ips;
#ifdef 0
    /* This is what a real tour message would look like. */
    /* NOT actually part of the struct. */
    struct in_addr ip_1;
    struct in_addr ip_2;
    /* ... */
    struct in_addr ip_num_ips;
#endif
}

        Structure/Design of tour
==========================================
1. Tour main thread spawns a thread fro recv'ing ICMP echo replies.
2. Tour main thread monitors the route traversal socket and the multicast
   sockets.
3. Tour main thread spawns a thread for each host it wants to ping. These
   ping sender threads all use the same socket to send the echo requests.


Handling ICMP pinging using threads:
    * tour spawns one (and only one) thread for recv'ing ping responses (echo
      replies). These are recv'd on the "pgrecver" PF_INET, SOCK_RAW socket.

    * tour creates multiple (on an as needed basis) threads for sending ping
      requests (echo requests). These are sent on the "pgsender" PF_PACKET,
      SOCK_RAW socket (all threads share the one socket).

    * When the main thread wants to shutdown the tour it must go through all
      of its pthread_id's and issue a cancellation request on each (using
      pthread_cancel()). Then it must wait to clean up all of its threads
      (using pthread_join()).

Handling Multicast UDP messages:
    * tour has one UDP socket for multicasting. Since it is bound to
      INADDR_ANY, recv'd messages must be validate to see if they truly
      came from the multicast address that tour gets from the tour message.

    * When tour gets the first tour message (or initiates the first message)
      it joins the multicast group and performs other setup (see the
      init_multicast_sock() func in tour.c).

    * We use the recv_msg() and msg struct to obtain the original destination
      address (using IP_RECVORIGDSTADDR) of the UDP datagram


          Misc. notes about tour
===========================================
The index will also always point to the ip of the current node at the hop.
The index field is only incremented right before the message is sent to
the next destination.

The macros in tour.h : TOUR_PREV, TOUR_CURR, and TOUR_NEXT return a pointer
(into the tourhdr message) to the corresponding struct in_addr.


==============================================================================
==================================== ARP =====================================
==============================================================================
Getting an AREQ
      * if the dst_mac is the same as my mac then send out an arep
      * if the dst_mac does not match then ignore it and do nothing

Replying to AREQ from my tour
      * look through my arp_cache
          if I find a matching IP then
            send tour the corresponding mac
          else
            add a partial entry to the cache and wait for an arep

Getting an AREP
      * look through arp_cache for partial entry
          if one exists then
            use the fd to tell tour what the mac address is
            update the partial arp_cache entry to a full one
            close the fd
          else
            I did not ask for this mac so something went wrong

==============================================================================
========================= API (the areq function) ============================
==============================================================================
Defined in api.c and api.h
Nothing fancy about it, follows the write up with the addition of sending
your source hardware address, type and length back to the api. Not just
the destination hardware address, type and length.
